// <auto-generated />
using System;
using LabManage.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LabManage.Migrations
{
    [DbContext(typeof(LabManageContext))]
    partial class LabManageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("LabManage.Models.Blacklist", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("labID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("staffID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userID")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("labID");

                    b.HasIndex("staffID");

                    b.HasIndex("userID");

                    b.ToTable("Blacklist");
                });

            modelBuilder.Entity("LabManage.Models.Item", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("toolID")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("toolID");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("LabManage.Models.Lab", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pic")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Lab");
                });

            modelBuilder.Entity("LabManage.Models.Timeslot", b =>
                {
                    b.Property<int>("count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("start")
                        .HasColumnType("TEXT");

                    b.Property<int>("toolID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("toolID");

                    b.ToTable("Timeslot");
                });

            modelBuilder.Entity("LabManage.Models.Tool", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<int>("labID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pic")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("labID");

                    b.ToTable("Tool");
                });

            modelBuilder.Entity("LabManage.Models.Transaction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("end")
                        .HasColumnType("TEXT");

                    b.Property<int?>("itemID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("staffID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("start")
                        .HasColumnType("TEXT");

                    b.Property<int>("status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("toolID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userID")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("itemID");

                    b.HasIndex("staffID");

                    b.HasIndex("toolID");

                    b.HasIndex("userID");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("LabManage.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("manageLabID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pic")
                        .HasColumnType("TEXT");

                    b.Property<string>("tel")
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("manageLabID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LabManage.Models.Blacklist", b =>
                {
                    b.HasOne("LabManage.Models.Lab", "lab")
                        .WithMany()
                        .HasForeignKey("labID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabManage.Models.User", "staff")
                        .WithMany()
                        .HasForeignKey("staffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabManage.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lab");

                    b.Navigation("staff");

                    b.Navigation("user");
                });

            modelBuilder.Entity("LabManage.Models.Item", b =>
                {
                    b.HasOne("LabManage.Models.Tool", "tool")
                        .WithMany()
                        .HasForeignKey("toolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tool");
                });

            modelBuilder.Entity("LabManage.Models.Timeslot", b =>
                {
                    b.HasOne("LabManage.Models.Tool", "tool")
                        .WithMany()
                        .HasForeignKey("toolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tool");
                });

            modelBuilder.Entity("LabManage.Models.Tool", b =>
                {
                    b.HasOne("LabManage.Models.Lab", "lab")
                        .WithMany()
                        .HasForeignKey("labID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lab");
                });

            modelBuilder.Entity("LabManage.Models.Transaction", b =>
                {
                    b.HasOne("LabManage.Models.Item", "item")
                        .WithMany()
                        .HasForeignKey("itemID");

                    b.HasOne("LabManage.Models.User", "staff")
                        .WithMany()
                        .HasForeignKey("staffID");

                    b.HasOne("LabManage.Models.Tool", "tool")
                        .WithMany()
                        .HasForeignKey("toolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabManage.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("item");

                    b.Navigation("staff");

                    b.Navigation("tool");

                    b.Navigation("user");
                });

            modelBuilder.Entity("LabManage.Models.User", b =>
                {
                    b.HasOne("LabManage.Models.Lab", "manage")
                        .WithMany()
                        .HasForeignKey("manageLabID");

                    b.Navigation("manage");
                });
#pragma warning restore 612, 618
        }
    }
}
